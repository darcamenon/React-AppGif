{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","modonocturno.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","modoNoche","document","querySelector","body","classList","toggle","GifExpertApp","titulo","categories","onClick","defaultProps","ReactDOM","render","getElementById"],"mappings":"mMAEaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACG,uBAAMC,SARY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAIjB,UACG,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAblB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,UAYkD,Q,+BClBlEG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UACnDH,GAFiB,+DAIII,MAAMF,GAJV,cAIdG,EAJc,gBAKGA,EAAUC,OALb,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXpB,kBAebM,GAfa,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEtC,OACG,sBAAKc,UAAU,0CAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IADvB,IACiC,kCAAKA,EAAL,OAAiB,QCF3CO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SACvB,ECFyB,SAACA,GAC1B,MAA0Bd,mBAAS,CAChCqB,KAAM,GACNa,SAAS,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACPxB,EAAQC,GAAUwB,MAAK,SAACC,GACrBH,EAAS,CACNf,KAAMkB,EACNL,SAAS,SAGf,CAACpB,IAEGqB,EDb2BK,CAAa1B,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAItB,OACG,qCACG,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OACCoB,GACE,mBAAGJ,UAAU,mCAAb,wBAEH,qBAAKA,UAAU,YAAf,SACIH,EAAOJ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEjBxBgB,EAAY,WACVC,SAASC,cAAc,SACvBD,SAASE,KAEjBC,UAAUC,OAAO,iBCGXC,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAC5B,EAAoChD,mBAAS,CAAC,KAA9C,mBAAOiD,EAAP,KAAmBlD,EAAnB,KAMA,OACG,gCACG,mBAAGmD,QAAST,EAAWX,UAAU,gBACjC,mCAAMkB,EAAN,OAFH,IAEuB,cAAC,EAAD,CAAajD,cAAeA,IAAkB,IAClE,uBAAO,IAIqC,IAC5C,+BACI,IAEEkD,EAAW1B,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,MAElB,OACC,QAKfiC,EAAaI,aAAe,CACzBH,OAAQ,gB,MC/BXI,IAASC,OAAO,cAAC,EAAD,IAAkBX,SAASY,eAAe,W","file":"static/js/main.61edfa13.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nexport const AddCategory = ({ setCategories }) => {\r\n   // Puedo traer el useState sin necesidad de importarlo\r\n   const [inputValue, setInputValue] = useState(\"\");\r\n   const handleInputChange = (e) => {\r\n      setInputValue(e.target.value);\r\n   };\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      if (inputValue.trim().length > 2) {\r\n         setCategories((cats) => [inputValue, ...cats]);\r\n         setInputValue(\"\");\r\n      }\r\n   };\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input type=\"text\" value={inputValue} onChange={handleInputChange} />{\" \"}\r\n      </form>\r\n   );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n   setCategories: PropTypes.func.isRequired, //func evalua funciones\r\n};\r\n\r\n// AddCategory.propTypes = {\r\n//    value: PropTypes.string.isRequired,\r\n// };\r\n// AddCategory.defaultProps = {\r\n//    value: \"\",\r\n// };\r\n","export const getGifs = async (category) => {\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n      category\r\n   )}&limit=10&api_key=E4rmBaV9oSgVKBnnnN3d9nRQLHL6flTi`; // encodeURI me permite remplazar espacios\r\n   const respuesta = await fetch(url);\r\n   const { data } = await respuesta.json();\r\n\r\n   const gifs = data.map((img) => {\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.images?.downsized_medium.url,\r\n      };\r\n   });\r\n\r\n   return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n   // console.log(id, title, url);\r\n   return (\r\n      <div className=\"card animate__animated animate__fadeIn \">\r\n         <img src={url} alt={title} /> <p> {title} </p>{\" \"}\r\n      </div>\r\n   );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n   const { data: images, loading } = useFetchGifs(category);\r\n\r\n   //  getGifs();\r\n   //*********** NO VA CON {} SI NO CON () EL .map() */\r\n   return (\r\n      <>\r\n         <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n         {loading && (\r\n            <p className=\"animate__animated animate__flash\">Loading...</p>\r\n         )}\r\n         <div className=\"card-grid\">\r\n            {images.map((img) => (\r\n               <GifGridItem key={img.id} {...img} />\r\n            ))}\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n   const [state, setState] = useState({\r\n      data: [],\r\n      loading: true,\r\n   });\r\n\r\n   useEffect(() => {\r\n      getGifs(category).then((imgs) => {\r\n         setState({\r\n            data: imgs,\r\n            loading: false,\r\n         });\r\n      });\r\n   }, [category]);\r\n\r\n   return state; // {data:[], loading:true};\r\n};\r\n","export const modoNoche = () => {\r\n  const moon = document.querySelector('#moon');\r\n  const body = document.body;\r\n\r\n  body.classList.toggle('modoNocturno')\r\n\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nimport { modoNoche } from \"./modonocturno\";\r\n\r\n// GifExpertApp.defaulProps = {\r\n//    titulo: \"GifExpertApp\",\r\nexport const GifExpertApp = ({ titulo }) => {\r\n   const [categories, setCategories] = useState([\"\"]);\r\n\r\n   //  const handleAdd = () => {\r\n   //     // setCategories([...categories, \"The King Of Rivia\"]); // Agregar una posicion mas a un array\r\n   //     // setCategories((cat) => [...categories, \"Jaimico\"]); Esta solucion me sirve para llamarla desde otro componente\r\n   //  };\r\n   return (\r\n      <div>\r\n         <i onClick={modoNoche} className=\"far fa-moon\"></i>\r\n         <h2> {titulo} </h2> <AddCategory setCategories={setCategories} />{\" \"}\r\n         <hr />{\" \"}\r\n         {/* <button onClick={handleAdd}>Agregar</button>\r\n                                       {/* <button onClick={() => setCategories([...categories, \"Sangano\"])}>\r\n                                          Agregar\r\n                                       </button> */}{\" \"}\r\n         <ol>\r\n            {\" \"}\r\n            {\r\n               categories.map((category) => (\r\n                  <GifGrid key={category} category={category} />\r\n               )) //\r\n            }{\" \"}\r\n         </ol>{\" \"}\r\n      </div>\r\n   );\r\n};\r\n// };\r\nGifExpertApp.defaultProps = {\r\n   titulo: \"GifExpertApp\",\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}